//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace EditSamples {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class dsStudent : DataSet {
        
        private studentDataTable tablestudent;
        
        public dsStudent() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected dsStudent(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["student"] != null)) {
                    this.Tables.Add(new studentDataTable(ds.Tables["student"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public studentDataTable student {
            get {
                return this.tablestudent;
            }
        }
        
        public override DataSet Clone() {
            dsStudent cln = ((dsStudent)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["student"] != null)) {
                this.Tables.Add(new studentDataTable(ds.Tables["student"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tablestudent = ((studentDataTable)(this.Tables["student"]));
            if ((this.tablestudent != null)) {
                this.tablestudent.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "dsStudent";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/dsStudent.xsd";
            this.Locale = new System.Globalization.CultureInfo("zh-CN");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tablestudent = new studentDataTable();
            this.Tables.Add(this.tablestudent);
        }
        
        private bool ShouldSerializestudent() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void studentRowChangeEventHandler(object sender, studentRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class studentDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnstu_id;
            
            private DataColumn columnname;
            
            private DataColumn columnsex;
            
            private DataColumn columnaddr;
            
            internal studentDataTable() : 
                    base("student") {
                this.InitClass();
            }
            
            internal studentDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn stu_idColumn {
                get {
                    return this.columnstu_id;
                }
            }
            
            internal DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            internal DataColumn sexColumn {
                get {
                    return this.columnsex;
                }
            }
            
            internal DataColumn addrColumn {
                get {
                    return this.columnaddr;
                }
            }
            
            public studentRow this[int index] {
                get {
                    return ((studentRow)(this.Rows[index]));
                }
            }
            
            public event studentRowChangeEventHandler studentRowChanged;
            
            public event studentRowChangeEventHandler studentRowChanging;
            
            public event studentRowChangeEventHandler studentRowDeleted;
            
            public event studentRowChangeEventHandler studentRowDeleting;
            
            public void AddstudentRow(studentRow row) {
                this.Rows.Add(row);
            }
            
            public studentRow AddstudentRow(string stu_id, string name, string sex, string addr) {
                studentRow rowstudentRow = ((studentRow)(this.NewRow()));
                rowstudentRow.ItemArray = new object[] {
                        stu_id,
                        name,
                        sex,
                        addr};
                this.Rows.Add(rowstudentRow);
                return rowstudentRow;
            }
            
            public studentRow FindBystu_id(string stu_id) {
                return ((studentRow)(this.Rows.Find(new object[] {
                            stu_id})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                studentDataTable cln = ((studentDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new studentDataTable();
            }
            
            internal void InitVars() {
                this.columnstu_id = this.Columns["stu_id"];
                this.columnname = this.Columns["name"];
                this.columnsex = this.Columns["sex"];
                this.columnaddr = this.Columns["addr"];
            }
            
            private void InitClass() {
                this.columnstu_id = new DataColumn("stu_id", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnstu_id);
                this.columnname = new DataColumn("name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnname);
                this.columnsex = new DataColumn("sex", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnsex);
                this.columnaddr = new DataColumn("addr", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnaddr);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnstu_id}, true));
                this.columnstu_id.AllowDBNull = false;
                this.columnstu_id.Unique = true;
            }
            
            public studentRow NewstudentRow() {
                return ((studentRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new studentRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(studentRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.studentRowChanged != null)) {
                    this.studentRowChanged(this, new studentRowChangeEvent(((studentRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.studentRowChanging != null)) {
                    this.studentRowChanging(this, new studentRowChangeEvent(((studentRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.studentRowDeleted != null)) {
                    this.studentRowDeleted(this, new studentRowChangeEvent(((studentRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.studentRowDeleting != null)) {
                    this.studentRowDeleting(this, new studentRowChangeEvent(((studentRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovestudentRow(studentRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class studentRow : DataRow {
            
            private studentDataTable tablestudent;
            
            internal studentRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablestudent = ((studentDataTable)(this.Table));
            }
            
            public string stu_id {
                get {
                    return ((string)(this[this.tablestudent.stu_idColumn]));
                }
                set {
                    this[this.tablestudent.stu_idColumn] = value;
                }
            }
            
            public string name {
                get {
                    try {
                        return ((string)(this[this.tablestudent.nameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tablestudent.nameColumn] = value;
                }
            }
            
            public string sex {
                get {
                    try {
                        return ((string)(this[this.tablestudent.sexColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tablestudent.sexColumn] = value;
                }
            }
            
            public string addr {
                get {
                    try {
                        return ((string)(this[this.tablestudent.addrColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tablestudent.addrColumn] = value;
                }
            }
            
            public bool IsnameNull() {
                return this.IsNull(this.tablestudent.nameColumn);
            }
            
            public void SetnameNull() {
                this[this.tablestudent.nameColumn] = System.Convert.DBNull;
            }
            
            public bool IssexNull() {
                return this.IsNull(this.tablestudent.sexColumn);
            }
            
            public void SetsexNull() {
                this[this.tablestudent.sexColumn] = System.Convert.DBNull;
            }
            
            public bool IsaddrNull() {
                return this.IsNull(this.tablestudent.addrColumn);
            }
            
            public void SetaddrNull() {
                this[this.tablestudent.addrColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class studentRowChangeEvent : EventArgs {
            
            private studentRow eventRow;
            
            private DataRowAction eventAction;
            
            public studentRowChangeEvent(studentRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public studentRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
